//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Maxsys.VisualLAL
{
	/// <summary>
	/// DomainClass LALDominio
	/// É o objeto que contém todos os Símbolos
	/// </summary>
	[DslDesign::DisplayNameResource("Maxsys.VisualLAL.LALDominio.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Maxsys.VisualLAL.LALDominio.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Maxsys.VisualLAL.VisualLALDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("731968b2-470a-405d-9f66-e7b0db7cd416")]
	public partial class LALDominio : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LALDominio domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x731968b2, 0x470a, 0x405d, 0x9f, 0x66, 0xe7, 0xb0, 0xdb, 0x7c, 0xd4, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LALDominio(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LALDominio(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nome domain property code
		
		/// <summary>
		/// Nome domain property Id.
		/// </summary>
		public static readonly global::System.Guid NomeDomainPropertyId = new global::System.Guid(0xe3218d11, 0x375d, 0x446e, 0xad, 0x1b, 0x9c, 0x97, 0xbd, 0xe0, 0x94, 0xc5);
		
		/// <summary>
		/// Storage for Nome
		/// </summary>
		private global::System.String nomePropertyStorage = "Domínio1";
		
		/// <summary>
		/// Gets or sets the value of Nome domain property.
		/// Nome do Domínio
		/// </summary>
		[DslDesign::DisplayNameResource("Maxsys.VisualLAL.LALDominio/Nome.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Maxsys.VisualLAL.LALDominio/Nome.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Domínio1")]
		[DslModeling::DomainObjectId("e3218d11-375d-446e-ad1b-9c97bde094c5")]
		public global::System.String Nome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nomePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NomePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LALDominio.Nome domain property.
		/// </summary>
		internal sealed partial class NomePropertyHandler : DslModeling::DomainPropertyValueHandler<LALDominio, global::System.String>
		{
			private NomePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LALDominio.Nome domain property value handler.
			/// </summary>
			public static readonly NomePropertyHandler Instance = new NomePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LALDominio.Nome domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NomeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LALDominio element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nomePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LALDominio element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nomePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Descricao domain property code
		
		/// <summary>
		/// Descricao domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescricaoDomainPropertyId = new global::System.Guid(0x6823ac45, 0x166e, 0x47b9, 0x9f, 0x98, 0x4e, 0x63, 0x89, 0xad, 0xa8, 0x20);
		
		/// <summary>
		/// Storage for Descricao
		/// </summary>
		private global::System.String descricaoPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Descricao domain property.
		/// Descrição do Domínio
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Maxsys.VisualLAL.LALDominio/Descricao.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Maxsys.VisualLAL.LALDominio/Descricao.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6823ac45-166e-47b9-9f98-4e6389ada820")]
		public global::System.String Descricao
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descricaoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescricaoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LALDominio.Descricao domain property.
		/// </summary>
		internal sealed partial class DescricaoPropertyHandler : DslModeling::DomainPropertyValueHandler<LALDominio, global::System.String>
		{
			private DescricaoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LALDominio.Descricao domain property value handler.
			/// </summary>
			public static readonly DescricaoPropertyHandler Instance = new DescricaoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LALDominio.Descricao domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescricaoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LALDominio element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descricaoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LALDominio element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descricaoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Simbolos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Simbolos.
		/// Description for Maxsys.VisualLAL.DominioTemSimbolos.LALDominio
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Simbolo> Simbolos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Simbolo>, Simbolo>(global::Maxsys.VisualLAL.DominioTemSimbolos.LALDominioDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Maxsys.VisualLAL.Simbolo.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Maxsys.VisualLAL.Simbolo sourceSimbolo1 = sourceElement as global::Maxsys.VisualLAL.Simbolo;
			if (sourceSimbolo1 != null)
			{
				// Create link for path DominioTemSimbolos.Simbolos
				this.Simbolos.Add(sourceSimbolo1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Maxsys.VisualLAL.Simbolo sourceSimbolo1 = sourceElement as global::Maxsys.VisualLAL.Simbolo;
			if (sourceSimbolo1 != null)
			{
				// Delete link for path DominioTemSimbolos.Simbolos
				
				foreach (DslModeling::ElementLink link in global::Maxsys.VisualLAL.DominioTemSimbolos.GetLinks((global::Maxsys.VisualLAL.LALDominio)this, sourceSimbolo1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Maxsys.VisualLAL.DominioTemSimbolos.LALDominioDomainRoleId, global::Maxsys.VisualLAL.DominioTemSimbolos.SimboloDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Maxsys.VisualLAL
{
	/// <summary>
	/// DomainClass Entrada
	/// Representa uma entrada no LAL. Pode ser um Símbolo ou um Sinônimo de um Símbolo.
	/// </summary>
	[DslDesign::DisplayNameResource("Maxsys.VisualLAL.Entrada.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Maxsys.VisualLAL.Entrada.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Maxsys.VisualLAL.VisualLALDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nome = {nomePropertyStorage})")]
	[DslModeling::DomainObjectId("89b49b9b-0d4a-4805-a5ed-525489297abf")]
	public abstract partial class Entrada : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entrada domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89b49b9b, 0x0d4a, 0x4805, 0xa5, 0xed, 0x52, 0x54, 0x89, 0x29, 0x7a, 0xbf);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Entrada(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nome domain property code
		
		/// <summary>
		/// Nome domain property Id.
		/// </summary>
		public static readonly global::System.Guid NomeDomainPropertyId = new global::System.Guid(0xf9568314, 0x2ba8, 0x4682, 0x89, 0x54, 0xdc, 0x1f, 0xd3, 0x1e, 0x9c, 0x13);
		
		/// <summary>
		/// Storage for Nome
		/// </summary>
		private global::System.String nomePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Nome domain property.
		/// Nome da entrada (Símbolo ou Sinônimo).
		/// </summary>
		[DslDesign::DisplayNameResource("Maxsys.VisualLAL.Entrada/Nome.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Maxsys.VisualLAL.Entrada/Nome.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f9568314-2ba8-4682-8954-dc1fd31e9c13")]
		public global::System.String Nome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nomePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NomePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entrada.Nome domain property.
		/// </summary>
		internal sealed partial class NomePropertyHandler : DslModeling::DomainPropertyValueHandler<Entrada, global::System.String>
		{
			private NomePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entrada.Nome domain property value handler.
			/// </summary>
			public static readonly NomePropertyHandler Instance = new NomePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entrada.Nome domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NomeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entrada element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nomePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entrada element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nomePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Maxsys.VisualLAL
{
	/// <summary>
	/// DomainClass Simbolo
	/// Representa uma entrada única no LAL
	/// </summary>
	[DslDesign::DisplayNameResource("Maxsys.VisualLAL.Simbolo.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Maxsys.VisualLAL.Simbolo.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Maxsys.VisualLAL.VisualLALDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c607dae6-2730-445b-8fd9-b0015866b839")]
	public partial class Simbolo : Entrada
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Simbolo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc607dae6, 0x2730, 0x445b, 0x8f, 0xd9, 0xb0, 0x01, 0x58, 0x66, 0xb8, 0x39);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Simbolo(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Simbolo(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nocoes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Nocoes.
		/// Noções que o símbolo possui
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Nocao> Nocoes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Nocao>, Nocao>(global::Maxsys.VisualLAL.SimboloTemNocoes.SimboloDomainRoleId);
			}
		}
		#endregion
		#region Impactos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Impactos.
		/// Impactos que o símbolo possui.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Impacto> Impactos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Impacto>, Impacto>(global::Maxsys.VisualLAL.SimboloTemImpactos.SimboloDomainRoleId);
			}
		}
		#endregion
		#region Sinonimos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sinonimos.
		/// Sinônimos que o símbolo possui.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sinonimo> Sinonimos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sinonimo>, Sinonimo>(global::Maxsys.VisualLAL.SimboloTemSinonimos.SimboloDomainRoleId);
			}
		}
		#endregion
		#region Dominio opposite domain role accessor
		/// <summary>
		/// Gets or sets Dominio.
		/// Description for Maxsys.VisualLAL.DominioTemSimbolos.Simbolo
		/// </summary>
		public virtual LALDominio Dominio
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Maxsys.VisualLAL.DominioTemSimbolos.SimboloDomainRoleId) as LALDominio;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Maxsys.VisualLAL.DominioTemSimbolos.SimboloDomainRoleId, value);
			}
		}
		#endregion
		#region ReferenciaSimbolos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReferenciaSimbolos.
		/// Símbolos mencionados neste Símbolo.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Simbolo> ReferenciaSimbolos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Simbolo>, Simbolo>(global::Maxsys.VisualLAL.SimboloReferences.SimboloOrigemDomainRoleId);
			}
		}
		#endregion
		#region EhRefenciadoPorSimbolos opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EhRefenciadoPorSimbolos.
		/// Símbolos que mencionam este Símbolo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Simbolo> EhRefenciadoPorSimbolos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Simbolo>, Simbolo>(global::Maxsys.VisualLAL.SimboloReferences.SimboloDestinoDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Maxsys.VisualLAL.Nocao.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Maxsys.VisualLAL.Impacto.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Maxsys.VisualLAL.Sinonimo.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Maxsys.VisualLAL.Nocao sourceNocao1 = sourceElement as global::Maxsys.VisualLAL.Nocao;
			if (sourceNocao1 != null)
			{
				// Create link for path SimboloTemNocoes.Nocoes
				this.Nocoes.Add(sourceNocao1);

				return;
			}
				
			global::Maxsys.VisualLAL.Impacto sourceImpacto2 = sourceElement as global::Maxsys.VisualLAL.Impacto;
			if (sourceImpacto2 != null)
			{
				// Create link for path SimboloTemImpactos.Impactos
				this.Impactos.Add(sourceImpacto2);

				return;
			}
				
			global::Maxsys.VisualLAL.Sinonimo sourceSinonimo3 = sourceElement as global::Maxsys.VisualLAL.Sinonimo;
			if (sourceSinonimo3 != null)
			{
				// Create link for path SimboloTemSinonimos.Sinonimos
				this.Sinonimos.Add(sourceSinonimo3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Maxsys.VisualLAL.Nocao sourceNocao1 = sourceElement as global::Maxsys.VisualLAL.Nocao;
			if (sourceNocao1 != null)
			{
				// Delete link for path SimboloTemNocoes.Nocoes
				
				foreach (DslModeling::ElementLink link in global::Maxsys.VisualLAL.SimboloTemNocoes.GetLinks((global::Maxsys.VisualLAL.Simbolo)this, sourceNocao1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Maxsys.VisualLAL.SimboloTemNocoes.SimboloDomainRoleId, global::Maxsys.VisualLAL.SimboloTemNocoes.NocaoDomainRoleId);
				}

				return;
			}
				
			global::Maxsys.VisualLAL.Impacto sourceImpacto2 = sourceElement as global::Maxsys.VisualLAL.Impacto;
			if (sourceImpacto2 != null)
			{
				// Delete link for path SimboloTemImpactos.Impactos
				
				foreach (DslModeling::ElementLink link in global::Maxsys.VisualLAL.SimboloTemImpactos.GetLinks((global::Maxsys.VisualLAL.Simbolo)this, sourceImpacto2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Maxsys.VisualLAL.SimboloTemImpactos.SimboloDomainRoleId, global::Maxsys.VisualLAL.SimboloTemImpactos.ImpactoDomainRoleId);
				}

				return;
			}
				
			global::Maxsys.VisualLAL.Sinonimo sourceSinonimo3 = sourceElement as global::Maxsys.VisualLAL.Sinonimo;
			if (sourceSinonimo3 != null)
			{
				// Delete link for path SimboloTemSinonimos.Sinonimos
				
				foreach (DslModeling::ElementLink link in global::Maxsys.VisualLAL.SimboloTemSinonimos.GetLinks((global::Maxsys.VisualLAL.Simbolo)this, sourceSinonimo3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Maxsys.VisualLAL.SimboloTemSinonimos.SimboloDomainRoleId, global::Maxsys.VisualLAL.SimboloTemSinonimos.SinonimoDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Maxsys.VisualLAL
{
	/// <summary>
	/// DomainClass Sinonimo
	/// Representa uma entrada única no LAL, sendo sinônimo de um símbolo.
	/// </summary>
	[DslDesign::DisplayNameResource("Maxsys.VisualLAL.Sinonimo.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Maxsys.VisualLAL.Sinonimo.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Maxsys.VisualLAL.VisualLALDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9127e53e-6b80-465d-bd5d-a9e1d56ef0af")]
	public partial class Sinonimo : Entrada
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sinonimo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9127e53e, 0x6b80, 0x465d, 0xbd, 0x5d, 0xa9, 0xe1, 0xd5, 0x6e, 0xf0, 0xaf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sinonimo(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sinonimo(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Simbolo opposite domain role accessor
		/// <summary>
		/// Gets or sets Simbolo.
		/// Símbolo ao qual pertence o sinônimo.
		/// </summary>
		public virtual Simbolo Simbolo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Maxsys.VisualLAL.SimboloTemSinonimos.SinonimoDomainRoleId) as Simbolo;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Maxsys.VisualLAL.SimboloTemSinonimos.SinonimoDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Maxsys.VisualLAL
{
	/// <summary>
	/// DomainClass SubEntrada
	/// Representa uma Noção ou um Impacto do Símbolo
	/// </summary>
	[DslDesign::DisplayNameResource("Maxsys.VisualLAL.SubEntrada.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Maxsys.VisualLAL.SubEntrada.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Maxsys.VisualLAL.VisualLALDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5381e9e9-a48d-4682-849a-113bf8a98bbc")]
	public abstract partial class SubEntrada : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubEntrada domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5381e9e9, 0xa48d, 0x4682, 0x84, 0x9a, 0x11, 0x3b, 0xf8, 0xa9, 0x8b, 0xbc);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SubEntrada(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Texto domain property code
		
		/// <summary>
		/// Texto domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextoDomainPropertyId = new global::System.Guid(0xb6e929b1, 0x3aec, 0x484c, 0xa2, 0xc2, 0x14, 0xc6, 0x5e, 0x02, 0x98, 0x3b);
		
		/// <summary>
		/// Storage for Texto
		/// </summary>
		private global::System.String textoPropertyStorage = "Texo_Aqui";
		
		/// <summary>
		/// Gets or sets the value of Texto domain property.
		/// Description for Maxsys.VisualLAL.SubEntrada.Texto
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Maxsys.VisualLAL.SubEntrada/Texto.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Maxsys.VisualLAL.SubEntrada/Texto.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Texo_Aqui")]
		[DslModeling::DomainObjectId("b6e929b1-3aec-484c-a2c2-14c65e02983b")]
		public global::System.String Texto
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubEntrada.Texto domain property.
		/// </summary>
		internal sealed partial class TextoPropertyHandler : DslModeling::DomainPropertyValueHandler<SubEntrada, global::System.String>
		{
			private TextoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubEntrada.Texto domain property value handler.
			/// </summary>
			public static readonly TextoPropertyHandler Instance = new TextoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubEntrada.Texto domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SubEntrada element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubEntrada element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Maxsys.VisualLAL
{
	/// <summary>
	/// DomainClass Nocao
	/// É o signficado do Símbolo (denotação).
	/// </summary>
	[DslDesign::DisplayNameResource("Maxsys.VisualLAL.Nocao.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Maxsys.VisualLAL.Nocao.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Maxsys.VisualLAL.VisualLALDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3af5d015-0ebf-4230-8f7f-ebbfca1510b2")]
	public partial class Nocao : SubEntrada
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Nocao domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3af5d015, 0x0ebf, 0x4230, 0x8f, 0x7f, 0xeb, 0xbf, 0xca, 0x15, 0x10, 0xb2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Nocao(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Nocao(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Simbolo opposite domain role accessor
		/// <summary>
		/// Gets or sets Simbolo.
		/// Símbolo ao qual pertence a noção.
		/// </summary>
		public virtual Simbolo Simbolo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Maxsys.VisualLAL.SimboloTemNocoes.NocaoDomainRoleId) as Simbolo;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Maxsys.VisualLAL.SimboloTemNocoes.NocaoDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Maxsys.VisualLAL
{
	/// <summary>
	/// DomainClass Impacto
	/// Efeitos do uso/ocorrência do símbolo na aplicação ou do efeito de algo na
	/// aplicação sobre esse símbolo (conotação).
	/// </summary>
	[DslDesign::DisplayNameResource("Maxsys.VisualLAL.Impacto.DisplayName", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Maxsys.VisualLAL.Impacto.Description", typeof(global::Maxsys.VisualLAL.VisualLALDomainModel), "Maxsys.VisualLAL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Maxsys.VisualLAL.VisualLALDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d6e67379-0eff-4567-9c05-7b78140f47bc")]
	public partial class Impacto : SubEntrada
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Impacto domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd6e67379, 0x0eff, 0x4567, 0x9c, 0x05, 0x7b, 0x78, 0x14, 0x0f, 0x47, 0xbc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Impacto(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Impacto(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Simbolo opposite domain role accessor
		/// <summary>
		/// Gets or sets Simbolo.
		/// Símbolo ao qual pertence o impacto.
		/// </summary>
		public virtual Simbolo Simbolo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Maxsys.VisualLAL.SimboloTemImpactos.ImpactoDomainRoleId) as Simbolo;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Maxsys.VisualLAL.SimboloTemImpactos.ImpactoDomainRoleId, value);
			}
		}
		#endregion
	}
}
